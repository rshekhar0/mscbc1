# -*- coding: utf-8 -*-
"""Create your own blockchain and demonstrate its use.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N0cLjQ7vPWLN_B2bT8nSKxh84d4Kr6qN
"""



import hashlib
import time

class Block:
    def __init__(self, index, timestamp, data, previous_hash):
        self.index = index
        self.timestamp = timestamp
        self.data = data
        self.previous_hash = previous_hash
        self.nonce = 0  # Initialize the nonce attribute
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        hash_string = str(self.index) + str(self.timestamp) + str(self.data) + str(self.previous_hash) + str(self.nonce)
        return hashlib.sha256(hash_string.encode()).hexdigest()

    def mine_block(self, difficulty):
        while self.hash[0:difficulty] != '0' * difficulty:
            self.nonce += 1
            self.hash = self.calculate_hash()
        print(f"Block mined: {self.hash}")

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
        self.difficulty = 2

    def create_genesis_block(self):
        return Block(0, time.time(), "Genesis Block", "0")

    def get_latest_block(self):
        return self.chain[-1]

    def add_block(self, new_block):
        new_block.previous_hash = self.get_latest_block().hash
        new_block.mine_block(self.difficulty)
        self.chain.append(new_block)

    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]

            if current_block.hash != current_block.calculate_hash():
                return False
            if current_block.previous_hash != previous_block.hash:
                return False
        return True

# Usage example
blockchain = Blockchain()
print("Mining block 1...")
blockchain.add_block(Block(1, time.time(), {"amount": 4}, ""))
print("Mining block 2...")
blockchain.add_block(Block(2, time.time(), {"amount": 8}, ""))

print("Blockchain is valid:", blockchain.is_chain_valid())

# Tampering with the blockchain
blockchain.chain[1].data = {"amount": 100}
blockchain.chain[1].hash = blockchain.chain[1].calculate_hash()

print("Blockchain is valid after tampering:", blockchain.is_chain_valid())