# -*- coding: utf-8 -*-
"""A simple client class that generates private and public keys by using the built-in Python RSA algorithm and test it.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oi9EPFi-USTd9ouuVPoqBwCmM-Hk6cQO
"""

!pip install pycryptodome

#1A.- A simple client class that generates the private and public keys by using the built-in Python RSA algorithm and test it.

import Crypto
import binascii
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5

class Client:
    def __init__(self):
        # Generate RSA key pair
        random = Crypto.Random.new().read
        self._private_key = RSA.generate(1024, random)
        self._public_key = self._private_key.publickey()

        # Initialize signer with private key
        self._signer = PKCS1_v1_5.new(self._private_key)

    @property
    def identity(self):
        # Return hex-encoded public key in DER format
        return binascii.hexlify(self._public_key.exportKey(format='DER')).decode('ascii')

# Create a new client instance
Robert = Client()
print("\nPublic Key:", Robert.identity)